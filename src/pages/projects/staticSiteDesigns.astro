---
import Layout from "@layouts/Layout.astro";
import { type GalleryItem, type TechItem } from "@components/Projects/ProjectPage.astro";
import ProjectPage from "@components/Projects/ProjectPage.astro";
import { Image } from "astro:assets";

// Images
import staticSiteAbout from "@assets/projects/staticSiteDesigns/staticSiteAbout.png";
import staticSiteGoldProjects from "@assets/projects/staticSiteDesigns/staticSiteGoldProjects.png";
import staticSiteAboutMe from "@assets/projects/staticSiteDesigns/staticSiteAboutMe.png";

// Logos
import reactLogo from "@assets/techLogos/reactLogo.png";
import nodeLogo from "@assets/techLogos/node-js.svg";
import astro from "@assets/techLogos/astro.svg";
import deno from "@assets/techLogos/deno.svg";
import tailwind from "@assets/techLogos/tailwindLogo.png";
import vite from "@assets/techLogos/vite.png";
// Icons
import cobraIcon from "@assets/projects/staticSiteDesigns/cobra.png";

export const staticSiteTech: TechItem[] = [
  { techName: "AstroJS", techLogo: { img: astro, imgAlt: "astro", invert: true } },
  { techName: "TailwindCSS", techLogo: { img: tailwind, imgAlt: "tailwind" } },
  {
    techName: "React",
    techLogo: {
      img: reactLogo,
      imgAlt: "React",
    },
  },
  { techName: "NodeJS", techLogo: { img: nodeLogo, imgAlt: "NodeJS" } },
  { techName: "Deno Deploy", techLogo: { img: deno, imgAlt: "deno" } },
  { techName: "Vite", techLogo: { img: vite, imgAlt: "vite" } },
];
const link2 = { img: cobraIcon, text: "Live App", url: "/" };
const gallery: GalleryItem[] = [
  {
    image: { img: staticSiteAbout, imgAlt: "Static Red About Page" },
    caption: "Responsive grid About page section",
  },
  {
    image: { img: staticSiteGoldProjects, imgAlt: "Static Gold Projects Page" },
    caption: "Projects Page",
  },
  {
    image: { img: staticSiteAboutMe, imgAlt: "Static Red About Me" },
    caption: 'Central "About Me" section',
  },
];
---

<Layout>
  <ProjectPage
    title="Static Site Designs"
    emojis={["üöÄ", "üí®", "üé®"]}
    technologies={staticSiteTech}
    githubRepoLink="https://github.com/OptimisticShibe/professionalSite_25"
    link2={link2}
    gallery={gallery}
  >
    <p slot="summary">
      Various web-design projects, utilizing static-site generator <strong>AstroJS</strong> and <strong>TailwindCSS</strong> for the heavy lifting of programatic
      styling of content, as well as coding syntactic-sugar (as opposed to the static HTML and CSS methodology <a
        href="/projects/threeJsPortfolio"
        class="font-medium underline decoration-2">I used previously</a
      >).
    </p>

    <ol slot="goal">
      <li>Create beautiful, responsive personal webpages</li>
      <li>Maximize (reasonable) code abstraction (e.g. component-driven design)</li>
      <li>Utilize compiled Markdown at a larger scale</li>
      <li>Learn + familiarize self with TailwindCSS for the first time</li>
      <li>Explore the benefits and limitations of coding with a React-driven style within a static-site environment</li>
    </ol>

    <ol slot="uxFlow">
      <li>Homepage landing displays simple Top Nav and large Hero display with my information.</li>
      <li>User may navigate to any of three locations: resume PDF, Github profile, or Projects page</li>
      <li>On projects page, single page displays summaries of my coding projects, with links to full individual pages of each</li>
    </ol>
    <div slot="details">
      <section>
        <h3>üöÄ AstroJS</h3>
        <p>
          Astro is the real star of the show for these sites. The `.astro` file type is just a JSX file with frontmatter at the top for handling pure
          react-style operations (imports, props, interfaces).
          <br />
          It let me code comfortably like a React dev without actually needing to deal with the overhead of React itself.
        </p>
        <p>
          <strong>Routing</strong> is particularly easy with Astro‚Äìsimply making a new `.astro` file within the `pages/` directory handled the routing instantly.
          This made designing the navigable structure of my websites easy enough that I could experiment as I went along.
        </p>
        <p>
          <strong>Content collections</strong> are probably the most complex offering from Astro, and I did not use them on this site. On my other site however,
          I used it for creating a blog page. The idea being that each blog post could be a <strong>Markdown</strong> file in a folder, and then programmatically
          loaded and rendered on the site via Astro's<a href="https://docs.astro.build/en/guides/content-collections/"> Content Collections API</a>.
        </p>
      </section>
      <section>
        <h3>üçÉ TailwindCSS</h3>
        <p>This project was inspired by my desire to learn & practice Tailwind. I fell in love with it and its design philosophy immediately.</p>
        <p>
          I started my web design journey with Bootstrap and Bootstrap-styled libraries, so Tailwind's class system was intuitive from the start. Notably,
          Tailwind strongly encourages custom CSS when needed. Usually suggesting non-inline CSS for major styling, but otherwise offering very easy custom
          value integration into their class library.
        </p>
        <p>
          Tailwind's philosophy of inline-class styling also encouraged component-driven design, which fit my style to a T. If copy-pasting the same styling
          classes to four different `div` elements felt tedious, then it was probably a good excuse to make those elements into a reusable compnent anyways.
          <br />
          Tailwind seems to encourage tidy design and I love that.
        </p>
      </section>
    </div>
    <div slot="challenges">
      <section>
        <h3>Design Strategy</h3>
        <p>
          Eager to try out the technology, I neglected to plan out my first site. I ended up designing as I coded, which was much slower than using a tool like
          figma, or even just sketching out on paper. This extended to overall design, as well as specifics like font choices and colors.
        </p>
        <p>
          Tailwind and Astro together are very easy to develop with, and this may have encouraged my off-the-cuff design strategy. Only late in development did
          I take the Tailwind documentation's advice seriously and develop for mobile first, then adjust for desktop. Starting with that would have definitely
          made styling easier.
        </p>
      </section>
    </div>
  </ProjectPage>
</Layout>
